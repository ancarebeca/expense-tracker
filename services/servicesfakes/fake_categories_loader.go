// Code generated by counterfeiter. DO NOT EDIT.
package servicesfakes

import (
	"sync"

	"github.com/ancarebeca/expense-tracker/model"
	"github.com/ancarebeca/expense-tracker/services"
)

type FakeCategoriesLoader struct {
	LoadStub        func() error
	loadMutex       sync.RWMutex
	loadArgsForCall []struct{}
	loadReturns     struct {
		result1 error
	}
	loadReturnsOnCall map[int]struct {
		result1 error
	}
	CategoriseStub        func(statements []*model.Statement) ([]*model.Statement, error)
	categoriseMutex       sync.RWMutex
	categoriseArgsForCall []struct {
		statements []*model.Statement
	}
	categoriseReturns struct {
		result1 []*model.Statement
		result2 error
	}
	categoriseReturnsOnCall map[int]struct {
		result1 []*model.Statement
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCategoriesLoader) Load() error {
	fake.loadMutex.Lock()
	ret, specificReturn := fake.loadReturnsOnCall[len(fake.loadArgsForCall)]
	fake.loadArgsForCall = append(fake.loadArgsForCall, struct{}{})
	fake.recordInvocation("Load", []interface{}{})
	fake.loadMutex.Unlock()
	if fake.LoadStub != nil {
		return fake.LoadStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.loadReturns.result1
}

func (fake *FakeCategoriesLoader) LoadCallCount() int {
	fake.loadMutex.RLock()
	defer fake.loadMutex.RUnlock()
	return len(fake.loadArgsForCall)
}

func (fake *FakeCategoriesLoader) LoadReturns(result1 error) {
	fake.LoadStub = nil
	fake.loadReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCategoriesLoader) LoadReturnsOnCall(i int, result1 error) {
	fake.LoadStub = nil
	if fake.loadReturnsOnCall == nil {
		fake.loadReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.loadReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCategoriesLoader) Categorise(statements []*model.Statement) ([]*model.Statement, error) {
	var statementsCopy []*model.Statement
	if statements != nil {
		statementsCopy = make([]*model.Statement, len(statements))
		copy(statementsCopy, statements)
	}
	fake.categoriseMutex.Lock()
	ret, specificReturn := fake.categoriseReturnsOnCall[len(fake.categoriseArgsForCall)]
	fake.categoriseArgsForCall = append(fake.categoriseArgsForCall, struct {
		statements []*model.Statement
	}{statementsCopy})
	fake.recordInvocation("Categorise", []interface{}{statementsCopy})
	fake.categoriseMutex.Unlock()
	if fake.CategoriseStub != nil {
		return fake.CategoriseStub(statements)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.categoriseReturns.result1, fake.categoriseReturns.result2
}

func (fake *FakeCategoriesLoader) CategoriseCallCount() int {
	fake.categoriseMutex.RLock()
	defer fake.categoriseMutex.RUnlock()
	return len(fake.categoriseArgsForCall)
}

func (fake *FakeCategoriesLoader) CategoriseArgsForCall(i int) []*model.Statement {
	fake.categoriseMutex.RLock()
	defer fake.categoriseMutex.RUnlock()
	return fake.categoriseArgsForCall[i].statements
}

func (fake *FakeCategoriesLoader) CategoriseReturns(result1 []*model.Statement, result2 error) {
	fake.CategoriseStub = nil
	fake.categoriseReturns = struct {
		result1 []*model.Statement
		result2 error
	}{result1, result2}
}

func (fake *FakeCategoriesLoader) CategoriseReturnsOnCall(i int, result1 []*model.Statement, result2 error) {
	fake.CategoriseStub = nil
	if fake.categoriseReturnsOnCall == nil {
		fake.categoriseReturnsOnCall = make(map[int]struct {
			result1 []*model.Statement
			result2 error
		})
	}
	fake.categoriseReturnsOnCall[i] = struct {
		result1 []*model.Statement
		result2 error
	}{result1, result2}
}

func (fake *FakeCategoriesLoader) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.loadMutex.RLock()
	defer fake.loadMutex.RUnlock()
	fake.categoriseMutex.RLock()
	defer fake.categoriseMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCategoriesLoader) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ services.CategoriesLoader = new(FakeCategoriesLoader)
