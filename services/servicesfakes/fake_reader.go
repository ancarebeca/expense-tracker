// Code generated by counterfeiter. DO NOT EDIT.
package servicesfakes

import (
	"sync"

	"github.com/ancarebeca/expense-tracker/services"
)

type FakeReader struct {
	ReadCsvStub        func() ([][]string, error)
	readCsvMutex       sync.RWMutex
	readCsvArgsForCall []struct{}
	readCsvReturns     struct {
		result1 [][]string
		result2 error
	}
	readCsvReturnsOnCall map[int]struct {
		result1 [][]string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeReader) ReadCsv() ([][]string, error) {
	fake.readCsvMutex.Lock()
	ret, specificReturn := fake.readCsvReturnsOnCall[len(fake.readCsvArgsForCall)]
	fake.readCsvArgsForCall = append(fake.readCsvArgsForCall, struct{}{})
	fake.recordInvocation("ReadCsv", []interface{}{})
	fake.readCsvMutex.Unlock()
	if fake.ReadCsvStub != nil {
		return fake.ReadCsvStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.readCsvReturns.result1, fake.readCsvReturns.result2
}

func (fake *FakeReader) ReadCsvCallCount() int {
	fake.readCsvMutex.RLock()
	defer fake.readCsvMutex.RUnlock()
	return len(fake.readCsvArgsForCall)
}

func (fake *FakeReader) ReadCsvReturns(result1 [][]string, result2 error) {
	fake.ReadCsvStub = nil
	fake.readCsvReturns = struct {
		result1 [][]string
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) ReadCsvReturnsOnCall(i int, result1 [][]string, result2 error) {
	fake.ReadCsvStub = nil
	if fake.readCsvReturnsOnCall == nil {
		fake.readCsvReturnsOnCall = make(map[int]struct {
			result1 [][]string
			result2 error
		})
	}
	fake.readCsvReturnsOnCall[i] = struct {
		result1 [][]string
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.readCsvMutex.RLock()
	defer fake.readCsvMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeReader) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ services.Reader = new(FakeReader)
