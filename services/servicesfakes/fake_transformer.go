// Code generated by counterfeiter. DO NOT EDIT.
package servicesfakes

import (
	"sync"

	"github.com/ancarebeca/expense-tracker/services"
)

type FakeTransformer struct {
	TransformStub        func(data [][]string) ([][]string, error)
	transformMutex       sync.RWMutex
	transformArgsForCall []struct {
		data [][]string
	}
	transformReturns struct {
		result1 [][]string
		result2 error
	}
	transformReturnsOnCall map[int]struct {
		result1 [][]string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTransformer) Transform(data [][]string) ([][]string, error) {
	var dataCopy [][]string
	if data != nil {
		dataCopy = make([][]string, len(data))
		copy(dataCopy, data)
	}
	fake.transformMutex.Lock()
	ret, specificReturn := fake.transformReturnsOnCall[len(fake.transformArgsForCall)]
	fake.transformArgsForCall = append(fake.transformArgsForCall, struct {
		data [][]string
	}{dataCopy})
	fake.recordInvocation("Transform", []interface{}{dataCopy})
	fake.transformMutex.Unlock()
	if fake.TransformStub != nil {
		return fake.TransformStub(data)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.transformReturns.result1, fake.transformReturns.result2
}

func (fake *FakeTransformer) TransformCallCount() int {
	fake.transformMutex.RLock()
	defer fake.transformMutex.RUnlock()
	return len(fake.transformArgsForCall)
}

func (fake *FakeTransformer) TransformArgsForCall(i int) [][]string {
	fake.transformMutex.RLock()
	defer fake.transformMutex.RUnlock()
	return fake.transformArgsForCall[i].data
}

func (fake *FakeTransformer) TransformReturns(result1 [][]string, result2 error) {
	fake.TransformStub = nil
	fake.transformReturns = struct {
		result1 [][]string
		result2 error
	}{result1, result2}
}

func (fake *FakeTransformer) TransformReturnsOnCall(i int, result1 [][]string, result2 error) {
	fake.TransformStub = nil
	if fake.transformReturnsOnCall == nil {
		fake.transformReturnsOnCall = make(map[int]struct {
			result1 [][]string
			result2 error
		})
	}
	fake.transformReturnsOnCall[i] = struct {
		result1 [][]string
		result2 error
	}{result1, result2}
}

func (fake *FakeTransformer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.transformMutex.RLock()
	defer fake.transformMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTransformer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ services.Transformer = new(FakeTransformer)
